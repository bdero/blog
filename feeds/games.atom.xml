<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>bran's blog - Games</title><link href="https://blog.bdero.me/" rel="alternate"></link><link href="https://blog.bdero.me/feeds/games.atom.xml" rel="self"></link><id>https://blog.bdero.me/</id><updated>2013-11-12T00:43:00-05:00</updated><entry><title>Prototype: "Just the Basics" v0.2</title><link href="https://blog.bdero.me/just-the-basics-2.html" rel="alternate"></link><published>2013-11-12T00:43:00-05:00</published><updated>2013-11-12T00:43:00-05:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-11-12:/just-the-basics-2.html</id><summary type="html">&lt;p&gt;It's week two with this thing and I met the goals I set at the last minute as usual. It's now got bullets firing, aiming with or without pointer lock controls, and simple enemies to kill called "Spin Stars". The delta time multiplier is being properly distributed and used with most everything (even with asymptotic functions like camera easing), so if you're running it fullscreen on legacy hardware and you're experiencing significant frame lag, it should still sort of &lt;em&gt;feel&lt;/em&gt; like things are the correct speed.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's week two with this thing and I met the goals I set at the last minute as usual. It's now got bullets firing, aiming with or without pointer lock controls, and simple enemies to kill called "Spin Stars". The delta time multiplier is being properly distributed and used with most everything (even with asymptotic functions like camera easing), so if you're running it fullscreen on legacy hardware and you're experiencing significant frame lag, it should still sort of &lt;em&gt;feel&lt;/em&gt; like things are the correct speed.&lt;/p&gt;
&lt;p&gt;I also modularized the code a bit and added JsDoc/Doxygen compatible comments for each file, class, and function. I haven't tried to generate any docs for it yet, but why not? I'd love to see this code get hacked on and reused. &lt;!--more--&gt;&lt;/p&gt;
&lt;iframe src="http://bdero.me/jtb-releases/v0.2/" height="400" width="100%" frameborder="no"&gt;&lt;/iframe&gt;

&lt;h5&gt;&lt;strong&gt;If you don't see anything in the frame above, then either &lt;a title="Check if your browser supports WebGL" href="http://get.webgl.org/" target="_blank"&gt;your browser doesn't support WebGL&lt;/a&gt;, or your graphics driver is not sufficient for initializing a WebGL context.&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The source code is available on &lt;a title="Just the Basics v0.2 source code" href="https://github.com/bdero/just-the-basics/tree/v0.2" target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To take control of the canvas, click on it. Like my &lt;a href="https://blog.bdero.me/just-the-basics-1.html" title="Prototype: “Just the Basics” v0.1"&gt;previous post&lt;/a&gt;, you can use the classic &lt;strong&gt;W, S, A, and D keys&lt;/strong&gt; (or the arrow keys) to navigate the ship around the field, but now you can control the direction of a cannon attached to the ship by &lt;strong&gt;moving the mouse&lt;/strong&gt; around over the canvas.&lt;/p&gt;
&lt;p&gt;You can also control the cannon by accepting the pointer lock request which fires every time the canvas is clicked, given that your browser supports it. This hides the mouse so you don't have to worry about accidentally moving the mouse out of the canvas and losing control.&lt;/p&gt;
&lt;p&gt;Lastly, &lt;strong&gt;holding the mouse down&lt;/strong&gt; causes the ship's cannon to continuously fire.&lt;/p&gt;
&lt;p&gt;I'd never done anything with a collision detection grid before, but I figured that's what this would need if I want to stuff hundreds of enemies into the playing field and expect it to still run smoothly.&lt;/p&gt;
&lt;figure style="width: 300px"&gt;
  &lt;a href="https://blog.bdero.me/images/collision_plans.jpeg" target="_blank"&gt;
    &lt;img class="size-medium wp-image-166" alt="Quick plans for the collision detection" src="https://blog.bdero.me/images/collision_plans.jpeg" width="300" height="191" /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;
    Quick plans for the collision detection
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The whole "ActiveObject" thing for entities that do collision checking didn't end up happening since the player and the bullets will need to do different things upon collision. Instead, there's a general method in World that takes an entity and figures out if any enemies are colliding with it using the world's collision grid. Besides, why would I want to go overkill worrying about how everything involving entities needs to be stuffed somewhere within the entity hierarchy? Last time I checked, this isn't Java.&lt;/p&gt;
&lt;p&gt;The resulting collision grid seems to be fast for bullet-to-entity collision detection so far, though I've yet to test it to its limit!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blog.bdero.me/images/lots_of_spin_stars.png" alt="Lots of Spin Stars" /&gt;&lt;/p&gt;
&lt;p&gt;For the next time around, I'd like to have a couple more enemies, a timeline system, and maybe player death along with a way to start over.&lt;/p&gt;
&lt;p&gt;More to come!&lt;/p&gt;
&lt;p&gt;Graphics provided by WebGL via &lt;a href="http://lib.ivank.net/" target="_blank"&gt;IvanK.js&lt;/a&gt;.&lt;/p&gt;</content><category term="2.5d"></category><category term="browser"></category><category term="canvas"></category><category term="gridwars"></category><category term="html5"></category><category term="interactive"></category><category term="ivank.js"></category><category term="javascript"></category><category term="jsdoc"></category><category term="just the basics"></category><category term="particles"></category><category term="pointer lock controls"></category><category term="prototype"></category><category term="shooter"></category><category term="space"></category><category term="top down"></category><category term="vector graphics"></category><category term="webgl"></category></entry><entry><title>Prototype: "Just the Basics" v0.1</title><link href="https://blog.bdero.me/just-the-basics-1.html" rel="alternate"></link><published>2013-11-03T15:49:00-05:00</published><updated>2013-11-03T15:49:00-05:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-11-03:/just-the-basics-1.html</id><summary type="html">&lt;p&gt;During the precious little time I had to work on anything this week, this is what I could come up with. It's the start of something that I'd like to continue taking more time to work on. I want it to be a &lt;a href="http://maxgames.googlecode.com/svn/trunk/vectorzone/" title="GridWars source code" target="_blank"&gt;GridWars&lt;/a&gt;-like game for browser use, but reserve the freedom to make implementation changes whenever I feel things could be more fun.&lt;/p&gt;</summary><content type="html">&lt;p&gt;During the precious little time I had to work on anything this week, this is what I could come up with. It's the start of something that I'd like to continue taking more time to work on. I want it to be a &lt;a href="http://maxgames.googlecode.com/svn/trunk/vectorzone/" title="GridWars source code" target="_blank"&gt;GridWars&lt;/a&gt;-like game for browser use, but reserve the freedom to make implementation changes whenever I feel things could be more fun.&lt;/p&gt;
&lt;iframe src="http://bdero.me/jtb-releases/v0.1/" height="400" width="100%" frameborder="no"&gt;&lt;/iframe&gt;

&lt;h5&gt;&lt;strong&gt;If you don't see anything in the frame above, then either &lt;a title="Check if your browser supports WebGL" href="http://get.webgl.org/" target="_blank"&gt;your browser doesn't support WebGL&lt;/a&gt;, or your graphics driver is not sufficient for initializing a WebGL context.&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The source code is available on &lt;a title="Just the Basics v0.1 source code" href="https://github.com/bdero/just-the-basics/tree/v0.1" target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To begin controlling it, click on the canvas. Moving around can be done with either the classic W, S, A, and D keys, or the arrow keys.&lt;/p&gt;
&lt;p&gt;Currently, there's nothing you can do except simply move around, bumping into the walls and watching the stars float along with the world in a parallax. In v0.2, there should be a way to shoot bullets (maybe using pointer lock controls?) and something to destroy.&lt;/p&gt;
&lt;p&gt;Stay tuned!&lt;/p&gt;
&lt;p&gt;Graphics provided by WebGL via &lt;a href="http://lib.ivank.net/" target="_blank"&gt;IvanK.js&lt;/a&gt;.&lt;/p&gt;</content><category term="2.5d"></category><category term="browser"></category><category term="canvas"></category><category term="gridwars"></category><category term="html5"></category><category term="interactive"></category><category term="ivank.js"></category><category term="javascript"></category><category term="just the basics"></category><category term="particles"></category><category term="prototype"></category><category term="shooter"></category><category term="space"></category><category term="top down"></category><category term="vector graphics"></category><category term="webgl"></category></entry><entry><title>Mini game: Particle Benchmark</title><link href="https://blog.bdero.me/particle-benchmark.html" rel="alternate"></link><published>2013-10-24T00:50:00-04:00</published><updated>2013-10-24T00:50:00-04:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-10-24:/particle-benchmark.html</id><summary type="html">&lt;p&gt;This is another oldie - and it's sort of a mini game because, even though there's no real way to win (I just played it by ear without any real planning or direction), it's still interactive in a very game-like way.&lt;/p&gt;</summary><content type="html">&lt;figure&gt;
  &lt;img width="100%" src="https://blog.bdero.me/images/particles0.png" /&gt;
  &lt;figcaption&gt;
    Splash screen with dynamic particle text.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is another oldie - and it's sort of a mini game because, even though there's no real way to win (I just played it by ear without any real planning or direction), it's still interactive in a very game-like way.&lt;/p&gt;
&lt;p&gt;I wrote most of it during the two weeks prior to attending college primarily to have something to show off to professors. The plan was to use it in my conquest to skip out of as many basic comp-sci classes as possible. Didn't work so well - but I did get into a pretty neat class working mostly with the Android SDK and OpenGL ES early on. Unfortunately, given that it was OpenGL ES &lt;em&gt;1.1&lt;/em&gt;, the other students and I ended up only working with the highly outdated fixed pipeline.&lt;/p&gt;
&lt;p&gt;The content isn't embedded into the post this time because, as much as it pains me to say, it doesn't handle resizing very well and I've lost the original source code (though I haven't given up looking for it in my backups). There was a version down the line that resized just fine, but maybe I can just add this one to my "properly remake into an actual game" list.&lt;/p&gt;
&lt;h2 style="text-align: center;"&gt;&lt;a title="&amp;quot;Particles benchmark&amp;quot; mini game" href="http://bdero.me/particle-roll/" target="_blank"&gt;Click here to play the mini game.&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;You can use the classic W, A, S, and D keys, or the arrow keys, to roll around. That's pretty much all you need to know. When compiling it as an Android application, it would rely on the gyroscope for movement to give it the "rolling a marble around on a surface" feel.&lt;/p&gt;
&lt;figure&gt;
  &lt;img width="100%" src="https://blog.bdero.me/images/particles1.png" /&gt;
  &lt;figcaption&gt;
    The "mini game" in action.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The sphere rotation effect is faked in a 2.5D-like way, where the attached 2D particles are being modified by a 3D rotation matrix and a Z-value based radii. Their draw order is also Z-indexed. The particle text was fun stuff - I designed a very low-res (3px by 5px characters) monospace typeface on a piece of graph paper, including both lowercase and uppercase letters as well as decimal numbers and various symbols. I then decided to compress it by row (so each character's data could be represented by a string of length 5, one for each row) and manually added each character to an array that corresponds to ASCII.&lt;/p&gt;
&lt;p&gt;There are a couple of fun features, like how colliding with a red particle results in an opposing force and 1/5 total particle loss consisting of the particles that were closest to the point of impact. The yellow debris flying all over the place when colliding with blue-green particles at high speeds also makes a decent effect, and the delta clock in the background doesn't really do much, but its intent was to be an actual timer for the game.&lt;/p&gt;
&lt;p&gt;The experimental part was to make everything.. a particle. All display objects share common ancestry because they're all just circles of various colors and sizes.&lt;/p&gt;
&lt;p&gt;I wrote it in a proprietary BASIC-like language called Monkey and used its JavaScript translator. This isn't an endorsement. I do &lt;em&gt;not&lt;/em&gt; recommend Monkey due to both its proprietary nature and the fact that this could have been more effectively and easily written directly in JavaScript.&lt;/p&gt;
&lt;p&gt;The benefit of Monkey at the time was that it translates code for use with a handful of different platforms and frameworks almost seamlessly. Why didn't I just use &lt;a title="Haxe official website" href="http://haxe.org/" target="_blank"&gt;Haxe&lt;/a&gt;? Because I didn't do any research.&lt;/p&gt;</content><category term="2.5d"></category><category term="browser"></category><category term="canvas"></category><category term="circles"></category><category term="html5"></category><category term="interactive"></category><category term="javascript"></category><category term="mini game"></category><category term="monkey"></category><category term="oldie"></category><category term="particles"></category><category term="vector graphics"></category></entry><entry><title>Mini game: Equilibrium</title><link href="https://blog.bdero.me/equilibrium.html" rel="alternate"></link><published>2013-10-20T23:27:00-04:00</published><updated>2013-10-20T23:27:00-04:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-10-20:/equilibrium.html</id><summary type="html">&lt;p&gt;Well, that streak quickly came to an end. I was hoping to write new experiments on time to post every week, but time has gotten very tight very fast. Instead, I have something old to share. I banged most of it out during a physics class one day last year right around the time I started feeling sour about my college.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, that streak quickly came to an end. I was hoping to write new experiments on time to post every week, but time has gotten very tight very fast. Instead, I have something old to share. I banged most of it out during a physics class one day last year right around the time I started feeling sour about my college. &lt;!--more--&gt;&lt;/p&gt;
&lt;iframe src="http://bdero.me/html5fun/projects/equilibrium/" height="465" width="100%" frameborder="no"&gt;&lt;/iframe&gt;

&lt;p&gt;The source code is available on &lt;a title="Equilibrium source code" href="https://github.com/bdero/html5fun/blob/gh-pages/projects/equilibrium/equilibrium.js" target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the green or red point is absorbed, left clicking restarts the mini game.&lt;/p&gt;
&lt;p&gt;You are a mouse controlled green point who is able to absorb both the red center point and the spiraling white points. The red point simply remains in the center, collecting the white points that you don't collect yourself. Absorption of a white point results in growth. When you (the green point) touch the red point, both points shrink.&lt;/p&gt;
&lt;p&gt;There are two ways to lose, but no real way to win. In order to stay playing for as long as possible and progress, you must prevent the red and green points from absorbing each other. There's a sort of score/level bar at the top that collects as the sizes of the points are canceled out. Each time the "score" bar fills up, it resets and becomes more difficult to refill.&lt;/p&gt;
&lt;p&gt;I figure this might be a fun little idea to expand later.&lt;/p&gt;
&lt;p&gt;Graphics provided by the canvas 2D API via &lt;a title="jsGameSoup GitHub repository" href="https://github.com/chr15m/jsGameSoup" target="_blank"&gt;jsGameSoup&lt;/a&gt;.&lt;/p&gt;</content><category term="2d"></category><category term="browser"></category><category term="canvas"></category><category term="circles"></category><category term="html5"></category><category term="interactive"></category><category term="javascript"></category><category term="jsgamesoup"></category><category term="mini game"></category><category term="minimal"></category><category term="oldie"></category><category term="vector graphics"></category></entry></feed>