<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>bran's blog - bdero</title><link href="https://blog.bdero.me/" rel="alternate"></link><link href="https://blog.bdero.me/feeds/bdero.atom.xml" rel="self"></link><id>https://blog.bdero.me/</id><updated>2013-12-11T12:00:00-05:00</updated><entry><title>He Comes: Animated text screw-up script</title><link href="https://blog.bdero.me/animated-zalgo.html" rel="alternate"></link><published>2013-12-11T12:00:00-05:00</published><updated>2013-12-11T12:00:00-05:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-12-11:/animated-zalgo.html</id><summary type="html">&lt;script type="text/javascript" src="http://bdero.me/animated-zalgo/hecomes.js"&gt;&lt;/script&gt;

&lt;p&gt;So everyone loves the corrupt appearance of &lt;a href="http://www.marlborotech.com/Zalgo.html" title="Zalgo text generator" target="_blank"&gt;Z̹̍ͣ̌a͚̝̮̝̎͞l̞͚̣̣ͭ͐̌͒̒gͬ͆҉̣͎̹̤̱̳̮o͖̣̱̺͔̰͆͜ͅ ̨̤̎́͊̉͒ť̬̯͚̞̕e̷̺̫̝̱̩̯̓̀͑͛̽̆x̼̹̰t̃̂̃ͫ̍̄͂&lt;/a&gt;, right? But what about something a little more fun, like.... &lt;div class="hecomes" style="display: block; height: 10px; text-align: center;"&gt;animated Zalgo text!&lt;/div&gt;&lt;/p&gt;</summary><content type="html">&lt;script type="text/javascript" src="http://bdero.me/animated-zalgo/hecomes.js"&gt;&lt;/script&gt;

&lt;p&gt;So everyone loves the corrupt appearance of &lt;a href="http://www.marlborotech.com/Zalgo.html" title="Zalgo text generator" target="_blank"&gt;Z̹̍ͣ̌a͚̝̮̝̎͞l̞͚̣̣ͭ͐̌͒̒gͬ͆҉̣͎̹̤̱̳̮o͖̣̱̺͔̰͆͜ͅ ̨̤̎́͊̉͒ť̬̯͚̞̕e̷̺̫̝̱̩̯̓̀͑͛̽̆x̼̹̰t̃̂̃ͫ̍̄͂&lt;/a&gt;, right?&lt;/p&gt;
&lt;p&gt;But what about something a little more fun, like.... &lt;div class="hecomes" style="display: block; height: 10px; text-align: center;"&gt;animated Zalgo text!&lt;/div&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;If you've got JavaScript enabled, I'm sure you can appreciate just how delightfully screwed up that is.&lt;/p&gt;
&lt;p&gt;Here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * He Comes - Animated text fuck-up script.&lt;/span&gt;
&lt;span class="cm"&gt; * 2013 Brandon DeRosier&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * https://github.com/bdero/animated-zalgo&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * This javascript is licensed under the GNU General Public License, version 3 or later.&lt;/span&gt;
&lt;span class="cm"&gt; * http://www.gnu.org/licenses/gpl-3.0-standalone.html&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * TO USE: Include this script into the header of a page containing text element(s) with&lt;/span&gt;
&lt;span class="cm"&gt; *         a class of &amp;quot;hecomes&amp;quot;.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;


&lt;span class="c1"&gt;// MiniDaemon - Mozilla Developer Network - ver. 1.0 rev. 1&lt;/span&gt;
&lt;span class="c1"&gt;// This framework is released under the GNU General Public License, version 3 or later.&lt;/span&gt;
&lt;span class="c1"&gt;// http://www.gnu.org/licenses/gpl-3.0-standalone.html&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MiniDaemon&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oOwner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fTask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nRate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nLen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MiniDaemon - not enough arguments&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oOwner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oOwner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fTask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isFinite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nRate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;nRate&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nRate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nLen&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nLen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/* These properties should be read-only */&lt;/span&gt;

&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SESSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PAUSED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BACKW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/* Global methods */&lt;/span&gt;

&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oDmn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;oDmn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INDEX&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;oDmn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BACKW&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oDmn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oDmn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oDmn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INDEX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oDmn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oDmn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BACKW&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;oDmn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAtEnd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;oDmn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="cm"&gt;/* Instances methods */&lt;/span&gt;

&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAtEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BACKW&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;isFinite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INDEX&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INDEX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;synchronize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PAUSED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SESSION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SESSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceCall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SESSION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PAUSED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bReverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bBackw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bReverse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BACKW&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;bBackw&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAtEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PAUSED&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BACKW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bBackw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PAUSED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;synchronize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="c1"&gt;// Character tables taken from the original Zalgo text generator.&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;zalgoUp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u030d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u030e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0304&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0305&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u033f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0311&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0306&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0310&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0352&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0357&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0351&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0307&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0308&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u030a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0342&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0343&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0344&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u034a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u034b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u034c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0303&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0302&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u030c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0350&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0300&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0301&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u030b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u030f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0312&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0313&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0314&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u033d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0309&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0363&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0364&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0365&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0366&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0367&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0368&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0369&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u036a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u036b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u036c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u036d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u036e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u036f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u033e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u035b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0346&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u031a&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;zalgoDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0316&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0317&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0318&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0319&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u031c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u031d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u031e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u031f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0320&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0324&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0325&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0326&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0329&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u032a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u032b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u032c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u032d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u032e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u032f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0330&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0331&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0332&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0333&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0339&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u033a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u033b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u033c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0345&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0347&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0348&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0349&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u034d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u034e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0353&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0354&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0355&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0356&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0359&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u035a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0323&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;zalgoMiddle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0315&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u031b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0340&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0341&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0358&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0321&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0322&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0327&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0328&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0334&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0335&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0336&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u034f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u035c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u035d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u035e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u035f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0360&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0362&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0338&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;\u0337&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0361&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\u0489&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;


&lt;span class="c1"&gt;// He comes....&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HeComes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;daemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MiniDaemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fuckUp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;HeComes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;additions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;em&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sub&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;HeComes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;faces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Comic Sans&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Alial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Georgia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Papyrus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mono&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;HeComes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zalgo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;zalgoMiddle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;zalgoDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;zalgoUp&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;HeComes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fuckUp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newHtml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalText&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// upper or lower case&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// added tags&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;additions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;additions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;additions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// zalgo&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zalgo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zalgo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zalgo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

    &lt;span class="c1"&gt;// font color&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;color=&amp;quot;#700&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// font face and color&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;font face=&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
         &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/font&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;newHtml&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newHtml&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="c1"&gt;// Initialize&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heComesInstances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;containers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hecomes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;heComesInstances&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HeComes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code can also be pulled from the &lt;a href="https://github.com/bdero/animated-zalgo/blob/gh-pages/hecomes.js" title="hecomes.js" target="_blank"&gt;GitHub&lt;/a&gt; repository.&lt;/p&gt;
&lt;h3&gt;To use:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First, include the script anywhere in your page (header or not):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://bdero.me/animated-zalgo/hecomes.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note: If your site uses an SSL certificate, you should host it yourself because I'm currently not. Most modern browsers reject mixed content by default out of concern for user privacy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Next, add an element (or multiple elements) to the page with a class of "&lt;strong&gt;hecomes&lt;/strong&gt;". For instance, a &lt;strong&gt;div&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hecomes&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: block; height: 10px;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Screwed up text!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note: To avoid affecting other elements, you may want to style the element similar to how I did in the example above.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="algorithm"></category><category term="animated"></category><category term="browser"></category><category term="he comes"></category><category term="javascript"></category><category term="minidaemon"></category><category term="script"></category><category term="text"></category><category term="zalgo"></category></entry><entry><title>"Unlikr": Unlike everything on Tumblr</title><link href="https://blog.bdero.me/unlikr.html" rel="alternate"></link><published>2013-12-04T23:28:00-05:00</published><updated>2013-12-04T23:28:00-05:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-12-04:/unlikr.html</id><summary type="html">&lt;p&gt;So, if you're not so much like me, you use Tumblr - and you probably have thousands of likes and reblogs. Of course, your taste for material might change over time.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;&lt;strong&gt;Warning: This probably doesn't work anymore!&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;This script is brittle because it relies on non-versioned endpoints not intended for robots. Some people have messaged me to let me know that this script doesn't work anymore. Despite this, I'm keeping it here as a reference in case others may find it useful.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, if you're not so much like me, you use Tumblr - and you probably have thousands of likes and reblogs. Of course, your taste for material might change over time.&lt;/p&gt;
&lt;p&gt;Originally sketched in an IPython Notebook for my partner, the following is a quick Python 2 script to wipe out &lt;em&gt;most&lt;/em&gt; of your likes in a way that's pretty difficult for the Tumblr police to detect&lt;!--more--&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.common.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NoSuchElementException&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;
&lt;span class="n"&gt;find_likes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements_by_css_selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.post_control.like.liked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_next_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;next_page_link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Login to Tumblr&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://www.tumblr.com/login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user[email]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user[password]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unlikr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Go to likes page&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://www.tumblr.com/likes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Destroy those likes!&lt;/span&gt;
    &lt;span class="n"&gt;likes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_likes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="c1"&gt;# You can technically just floor it, but you might look too much like a robot&lt;/span&gt;
            &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Faster than refreshes&lt;/span&gt;
        &lt;span class="n"&gt;likes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_likes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Every once in a while you have to move to a new page instead of refreshing&lt;/span&gt;
        &lt;span class="c1"&gt;# Tumblr seems like kind of a fuck up in this regard&lt;/span&gt;
        &lt;span class="n"&gt;next_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_next_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;next_page&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;next_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;likes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_likes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;next_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_next_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;usage: unlikr [username] [password]&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;unlikr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;To use:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Install &lt;a href="http://www.python.org/download/" title="Python download page" target="_blank"&gt;Python 2&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Install &lt;a href="https://www.mozilla.org/firefox" title="Mozilla Firefox site" target="_blank"&gt;Mozilla Firefox&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Install &lt;a href="http://www.pip-installer.org/en/latest/installing.html" title="How to install pip" target="_blank"&gt;pip&lt;/a&gt;&lt;/strong&gt;, the Python package manager. Windows users see &lt;a href="https://stackoverflow.com/a/12476379" title="How to install pip on Windows" target="_blank"&gt;this guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Install &lt;a href="https://pypi.python.org/pypi/selenium" title="Selenium PyPI page" target="_blank"&gt;Selenium&lt;/a&gt; using pip&lt;/strong&gt;: run `&lt;strong&gt;pip install selenium&lt;/strong&gt;` from a terminal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Save the above script&lt;/strong&gt; as `&lt;strong&gt;unlikr.py&lt;/strong&gt;`.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run the script&lt;/strong&gt; by executing `&lt;strong&gt;python unlikr.py [USERNAME] [PASSWORD]&lt;/strong&gt;` in a terminal, replacing `&lt;strong&gt;[USERNAME]&lt;/strong&gt;` and `&lt;strong&gt;[PASSWORD]&lt;/strong&gt;` with your respective Tumblr credentials.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What it does:&lt;/h3&gt;

&lt;p&gt;Upon running the script, a new instance of Firefox will open with a blank profile, navigate to Tumblr, login, navigate to your likes page, and proceed to click the unlike buttons for every post at a maximum speed of 5 unlikes per second. You can then proceed to go get some tea or coffee. If you have 10,000 likes, the script will probably take about an hour to clean it all out - 33 minutes for unliking things, and the rest for page refreshes and hitting the &lt;code&gt;Next Page&lt;/code&gt; button.&lt;/p&gt;
&lt;h3&gt;What it doesn't:&lt;/h3&gt;

&lt;p&gt;Tumblr is weird. Search around for people complaining about not being able to look through all of their liked content and you'll find many examples.
&lt;strong&gt;This tool can't beat the fact that Tumblr hides things from you&lt;/strong&gt;, so you might reach a point where the script has been hitting the &lt;code&gt;Next Page&lt;/code&gt; hundreds of times without finding a single &lt;code&gt;like&lt;/code&gt;. At this point, you're likely not going to find any more content to unlike, even if Tumblr's reporting that you still &lt;code&gt;like&lt;/code&gt; hundreds or thousands of posts.&lt;/p&gt;
&lt;h3&gt;Why Selenium?&lt;/h3&gt;

&lt;p&gt;I was having a Selenium kind of day and I didn't feel like dancing around any client-side verification. Sure, you might need a display to run it - but if you use Tumblr, you've probably got one. Besides, look at how simple that script is with Firefox doing all the work!&lt;/p&gt;
&lt;p&gt;If you'd like to use this and you're having trouble getting it to work, please leave a comment below and I will help you.&lt;/p&gt;</content><category term="firefox"></category><category term="python"></category><category term="robot"></category><category term="script"></category><category term="selenium"></category><category term="tool"></category><category term="tumblr"></category><category term="unlikr"></category></entry><entry><title>Eight experiments</title><link href="https://blog.bdero.me/eight-experiments.html" rel="alternate"></link><published>2013-11-25T22:04:00-05:00</published><updated>2013-11-25T22:04:00-05:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-11-25:/eight-experiments.html</id><summary type="html">&lt;p&gt;All throughout the development of my weekly experiments so far, there's been a lot of experimentation and learning on my part. Most of the "completed" examples are too fragmented or tiny for their own post, and some of them (especially the &lt;a href="https://github.com/mrdoob/three.js" title="three.js Github repository" target="_blank"&gt;Three.js&lt;/a&gt; ones) are based off of popular tutorials posted on other blogs. The source code for each of them has been kicking around in the "test" &lt;a href="https://github.com/bdero?tab=repositories" title="cheesekeg.com Gitweb" target="_blank"&gt;repositories&lt;/a&gt; from the beginning, though.&lt;/p&gt;</summary><content type="html">&lt;p&gt;All throughout the development of my weekly experiments so far, there's been a lot of experimentation and learning on my part. Most of the "completed" examples are too fragmented or tiny for their own post, and some of them (especially the &lt;a href="https://github.com/mrdoob/three.js" title="three.js Github repository" target="_blank"&gt;Three.js&lt;/a&gt; ones) are based off of popular tutorials posted on other blogs. The source code for each of them has been kicking around in the "test" &lt;a href="https://github.com/bdero?tab=repositories" title="cheesekeg.com Gitweb" target="_blank"&gt;repositories&lt;/a&gt; from the beginning, though.&lt;/p&gt;
&lt;p&gt;Since I didn't manage to finish what I wanted to post this week, I've grouped all of these little experiments into one post (in no particular order) to make up for it.
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;None of the content is embedded for two reasons. Firstly, they all behave differently and I may or may not have figured out the greatest ways to make the experiments adjust to resizing. Secondly, I didn't want to crash your phone's browser with eight canvases and six WebGL contexts at the same time.&lt;/p&gt;
&lt;p&gt;Instead, the screenshots below directly link to each corresponding experiment. Some are interactive, some aren't. Some use &lt;a href="http://lib.ivank.net/" title="IvanK Lib" target="_blank"&gt;IvanK.js&lt;/a&gt;, others use &lt;a href="https://github.com/mrdoob/three.js" title="three.js Github repository" target="_blank"&gt;Three.js&lt;/a&gt; or &lt;a href="https://github.com/chr15m/jsGameSoup" title="jsGameSoup GitHub repository" target="_blank"&gt;jsGameSoup&lt;/a&gt;. Also, "pointer trail" is not recent, but I thought I'd throw it in anyhow.&lt;/p&gt;
&lt;p&gt;Try clicking and moving the mouse around on all of them to see what they do! c:
&lt;h3 style="text-align: center;"&gt;Click the images below to play the experiments.&lt;/h3&gt;
&lt;a title="Pointer trail experiment" href="http://bdero.me/html5fun/projects/pointertrail2/" target="_blank"&gt;&lt;img alt="Pointer trail experiment" src="https://blog.bdero.me/images/experiments/pointertrail.png" width="100%" /&gt;&lt;/a&gt;
&lt;a title="Vertex shader experiment" href="http://bdero.me/threejs-tests/helloshader/" target="_blank"&gt;&lt;img alt="Vertex shader experiment" src="https://blog.bdero.me/images/experiments/vertexshader.png" width="100%" /&gt;&lt;/a&gt;
&lt;a title="Spheres experiment" href="http://bdero.me/threejs-tests/simplewebgl/" target="_blank"&gt;&lt;img alt="Spheres experiment" src="https://blog.bdero.me/images/experiments/spheres.png" width="100%" /&gt;&lt;/a&gt;
&lt;a title="Stars experiment" href="http://bdero.me/threejs-tests/stars/" target="_blank"&gt;&lt;img alt="Stars experiment" src="https://blog.bdero.me/images/experiments/stars.png" width="100%" /&gt;&lt;/a&gt;
&lt;a title="Squares experiment" href="http://bdero.me/ivank-tests/squares/" target="_blank"&gt;&lt;img alt="Squares experiment" src="https://blog.bdero.me/images/experiments/squares.png" width="100%" /&gt;&lt;/a&gt;
&lt;a title="Noise experiment" href="http://bdero.me/ivank-tests/noise/" target="_blank"&gt;&lt;img alt="Noise experiment" src="https://blog.bdero.me/images/experiments/noise.png" width="100%" /&gt;&lt;/a&gt;
&lt;a title="Hearts experiment" href="http://bdero.me/ivank-tests/hearts/" target="_blank"&gt;&lt;img alt="Hearts experiment" src="https://blog.bdero.me/images/experiments/hearts.png" width="100%" /&gt;&lt;/a&gt;
&lt;a title="Fire experiment" href="http://bdero.me/ivank-tests/fire/" target="_blank"&gt;&lt;img alt="Fire experiment" src="https://blog.bdero.me/images/experiments/fire.png" width="100%" /&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="2.5d"></category><category term="2d"></category><category term="3d"></category><category term="bitmap graphics"></category><category term="browser"></category><category term="canvas"></category><category term="circles"></category><category term="html5"></category><category term="interactive"></category><category term="iteration"></category><category term="ivank.js"></category><category term="javascript"></category><category term="jsgamesoup"></category><category term="minimal"></category><category term="mobile"></category><category term="oldie"></category><category term="particles"></category><category term="space"></category><category term="three.js"></category><category term="vector graphics"></category><category term="webgl"></category></entry><entry><title>Prototype: "Just the Basics" v0.2</title><link href="https://blog.bdero.me/just-the-basics-2.html" rel="alternate"></link><published>2013-11-12T00:43:00-05:00</published><updated>2013-11-12T00:43:00-05:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-11-12:/just-the-basics-2.html</id><summary type="html">&lt;p&gt;It's week two with this thing and I met the goals I set at the last minute as usual. It's now got bullets firing, aiming with or without pointer lock controls, and simple enemies to kill called "Spin Stars". The delta time multiplier is being properly distributed and used with most everything (even with asymptotic functions like camera easing), so if you're running it fullscreen on legacy hardware and you're experiencing significant frame lag, it should still sort of &lt;em&gt;feel&lt;/em&gt; like things are the correct speed.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's week two with this thing and I met the goals I set at the last minute as usual. It's now got bullets firing, aiming with or without pointer lock controls, and simple enemies to kill called "Spin Stars". The delta time multiplier is being properly distributed and used with most everything (even with asymptotic functions like camera easing), so if you're running it fullscreen on legacy hardware and you're experiencing significant frame lag, it should still sort of &lt;em&gt;feel&lt;/em&gt; like things are the correct speed.&lt;/p&gt;
&lt;p&gt;I also modularized the code a bit and added JsDoc/Doxygen compatible comments for each file, class, and function. I haven't tried to generate any docs for it yet, but why not? I'd love to see this code get hacked on and reused. &lt;!--more--&gt;&lt;/p&gt;
&lt;iframe src="http://bdero.me/jtb-releases/v0.2/" height="400" width="100%" frameborder="no"&gt;&lt;/iframe&gt;

&lt;h5&gt;&lt;strong&gt;If you don't see anything in the frame above, then either &lt;a title="Check if your browser supports WebGL" href="http://get.webgl.org/" target="_blank"&gt;your browser doesn't support WebGL&lt;/a&gt;, or your graphics driver is not sufficient for initializing a WebGL context.&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The source code is available on &lt;a title="Just the Basics v0.2 source code" href="https://github.com/bdero/just-the-basics/tree/v0.2" target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To take control of the canvas, click on it. Like my &lt;a href="https://blog.bdero.me/just-the-basics-1.html" title="Prototype: “Just the Basics” v0.1"&gt;previous post&lt;/a&gt;, you can use the classic &lt;strong&gt;W, S, A, and D keys&lt;/strong&gt; (or the arrow keys) to navigate the ship around the field, but now you can control the direction of a cannon attached to the ship by &lt;strong&gt;moving the mouse&lt;/strong&gt; around over the canvas.&lt;/p&gt;
&lt;p&gt;You can also control the cannon by accepting the pointer lock request which fires every time the canvas is clicked, given that your browser supports it. This hides the mouse so you don't have to worry about accidentally moving the mouse out of the canvas and losing control.&lt;/p&gt;
&lt;p&gt;Lastly, &lt;strong&gt;holding the mouse down&lt;/strong&gt; causes the ship's cannon to continuously fire.&lt;/p&gt;
&lt;p&gt;I'd never done anything with a collision detection grid before, but I figured that's what this would need if I want to stuff hundreds of enemies into the playing field and expect it to still run smoothly.&lt;/p&gt;
&lt;figure style="width: 300px"&gt;
  &lt;a href="https://blog.bdero.me/images/collision_plans.jpeg" target="_blank"&gt;
    &lt;img class="size-medium wp-image-166" alt="Quick plans for the collision detection" src="https://blog.bdero.me/images/collision_plans.jpeg" width="300" height="191" /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;
    Quick plans for the collision detection
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The whole "ActiveObject" thing for entities that do collision checking didn't end up happening since the player and the bullets will need to do different things upon collision. Instead, there's a general method in World that takes an entity and figures out if any enemies are colliding with it using the world's collision grid. Besides, why would I want to go overkill worrying about how everything involving entities needs to be stuffed somewhere within the entity hierarchy? Last time I checked, this isn't Java.&lt;/p&gt;
&lt;p&gt;The resulting collision grid seems to be fast for bullet-to-entity collision detection so far, though I've yet to test it to its limit!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blog.bdero.me/images/lots_of_spin_stars.png" alt="Lots of Spin Stars" /&gt;&lt;/p&gt;
&lt;p&gt;For the next time around, I'd like to have a couple more enemies, a timeline system, and maybe player death along with a way to start over.&lt;/p&gt;
&lt;p&gt;More to come!&lt;/p&gt;
&lt;p&gt;Graphics provided by WebGL via &lt;a href="http://lib.ivank.net/" target="_blank"&gt;IvanK.js&lt;/a&gt;.&lt;/p&gt;</content><category term="2.5d"></category><category term="browser"></category><category term="canvas"></category><category term="gridwars"></category><category term="html5"></category><category term="interactive"></category><category term="ivank.js"></category><category term="javascript"></category><category term="jsdoc"></category><category term="just the basics"></category><category term="particles"></category><category term="pointer lock controls"></category><category term="prototype"></category><category term="shooter"></category><category term="space"></category><category term="top down"></category><category term="vector graphics"></category><category term="webgl"></category></entry><entry><title>Prototype: "Just the Basics" v0.1</title><link href="https://blog.bdero.me/just-the-basics-1.html" rel="alternate"></link><published>2013-11-03T15:49:00-05:00</published><updated>2013-11-03T15:49:00-05:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-11-03:/just-the-basics-1.html</id><summary type="html">&lt;p&gt;During the precious little time I had to work on anything this week, this is what I could come up with. It's the start of something that I'd like to continue taking more time to work on. I want it to be a &lt;a href="http://maxgames.googlecode.com/svn/trunk/vectorzone/" title="GridWars source code" target="_blank"&gt;GridWars&lt;/a&gt;-like game for browser use, but reserve the freedom to make implementation changes whenever I feel things could be more fun.&lt;/p&gt;</summary><content type="html">&lt;p&gt;During the precious little time I had to work on anything this week, this is what I could come up with. It's the start of something that I'd like to continue taking more time to work on. I want it to be a &lt;a href="http://maxgames.googlecode.com/svn/trunk/vectorzone/" title="GridWars source code" target="_blank"&gt;GridWars&lt;/a&gt;-like game for browser use, but reserve the freedom to make implementation changes whenever I feel things could be more fun.&lt;/p&gt;
&lt;iframe src="http://bdero.me/jtb-releases/v0.1/" height="400" width="100%" frameborder="no"&gt;&lt;/iframe&gt;

&lt;h5&gt;&lt;strong&gt;If you don't see anything in the frame above, then either &lt;a title="Check if your browser supports WebGL" href="http://get.webgl.org/" target="_blank"&gt;your browser doesn't support WebGL&lt;/a&gt;, or your graphics driver is not sufficient for initializing a WebGL context.&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The source code is available on &lt;a title="Just the Basics v0.1 source code" href="https://github.com/bdero/just-the-basics/tree/v0.1" target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To begin controlling it, click on the canvas. Moving around can be done with either the classic W, S, A, and D keys, or the arrow keys.&lt;/p&gt;
&lt;p&gt;Currently, there's nothing you can do except simply move around, bumping into the walls and watching the stars float along with the world in a parallax. In v0.2, there should be a way to shoot bullets (maybe using pointer lock controls?) and something to destroy.&lt;/p&gt;
&lt;p&gt;Stay tuned!&lt;/p&gt;
&lt;p&gt;Graphics provided by WebGL via &lt;a href="http://lib.ivank.net/" target="_blank"&gt;IvanK.js&lt;/a&gt;.&lt;/p&gt;</content><category term="2.5d"></category><category term="browser"></category><category term="canvas"></category><category term="gridwars"></category><category term="html5"></category><category term="interactive"></category><category term="ivank.js"></category><category term="javascript"></category><category term="just the basics"></category><category term="particles"></category><category term="prototype"></category><category term="shooter"></category><category term="space"></category><category term="top down"></category><category term="vector graphics"></category><category term="webgl"></category></entry><entry><title>Airport "simulator"</title><link href="https://blog.bdero.me/airport-simulator.html" rel="alternate"></link><published>2013-10-27T19:37:00-04:00</published><updated>2013-10-27T19:37:00-04:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-10-27:/airport-simulator.html</id><summary type="html">&lt;p&gt;During my sophomore year at college, I was on the lookout to insert graphics into whatever I could to loosen up some monotony. I decided that I would hack on displays to the labs I was doing for one of my classes by using Slick2D (it was basically a Java collections course). I presented in front of the class to show how easy it is to throw a little visual in front of something like this - I even found the I recorded for students explaining how grab the source!&lt;/p&gt;</summary><content type="html">&lt;p&gt;During my sophomore year at college, I was on the lookout to insert graphics into whatever I could to loosen up some monotony. I decided that I would hack on displays to the labs I was doing for one of my classes by using Slick2D (it was basically a Java collections course). I presented in front of the class to show how easy it is to throw a little visual in front of something like this - I even found the I recorded for students explaining how grab the source!&lt;/p&gt;
&lt;p&gt;Unfortunately, I hopped on the procrastination train after only one lab, so the resulting repository with the one modified lab, "airport simulation", might still be sitting on &lt;a href="https://github.com/bdero/slick2d-structures-labs" title='Original "airport simulation" repository' target="_blank"&gt;GitHub&lt;/a&gt;, but it was never committed to again.&lt;/p&gt;
&lt;p&gt;I was reminded of this recently and quickly rewrote it yesterday for browser use.
&lt;!--more--&gt;&lt;/p&gt;
&lt;iframe src="http://bdero.me/ivank-tests/airport/" height="371" width="100%" frameborder="no"&gt;&lt;/iframe&gt;

&lt;h5&gt;&lt;strong&gt;If you don't see anything in the frame above, then either &lt;a title="Check if your browser supports WebGL" href="http://get.webgl.org/" target="_blank"&gt;your browser doesn't support WebGL&lt;/a&gt;, or your graphics driver is not sufficient for initializing a WebGL context.&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The source code is available on &lt;a title="Airport simulator test source code" href="https://github.com/bdero/ivank-tests/blob/gh-pages/airport/airport.js" target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Non-interactive, all it really does is display two queues of airplanes sharing a runway - ones that are waiting to land, and ones that are waiting to take off. There is only one runway, so they share it based on priority, where the queue of planes waiting to land takes precedence. Each action occupies the strip for one second, while there are five 15% chances per second for a new airplane to arrive at the scene.&lt;/p&gt;
&lt;p&gt;The graphics were made with &lt;a href="http://inkscape.org/" title="Inkscape website" target="_blank"&gt;Inkscape&lt;/a&gt;. The XCF file can be found in the &lt;a href="https://github.com/bdero/slick2d-structures-labs/tree/master/src/lab4_AirportSimulation/images" title='Original "airport simulation" repository images' target="_blank"&gt;old repository&lt;/a&gt;. And the graphics were rendered with WebGL via &lt;a href="http://lib.ivank.net/" target="_blank"&gt;IvanK.js&lt;/a&gt;.&lt;/p&gt;</content><category term="2d"></category><category term="bitmap graphics"></category><category term="browser"></category><category term="canvas"></category><category term="html5"></category><category term="ivank.js"></category><category term="minimal"></category><category term="mobile"></category><category term="oldie"></category><category term="simulation"></category><category term="visualization"></category></entry><entry><title>Mini game: Particle Benchmark</title><link href="https://blog.bdero.me/particle-benchmark.html" rel="alternate"></link><published>2013-10-24T00:50:00-04:00</published><updated>2013-10-24T00:50:00-04:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-10-24:/particle-benchmark.html</id><summary type="html">&lt;p&gt;This is another oldie - and it's sort of a mini game because, even though there's no real way to win (I just played it by ear without any real planning or direction), it's still interactive in a very game-like way.&lt;/p&gt;</summary><content type="html">&lt;figure&gt;
  &lt;img width="100%" src="https://blog.bdero.me/images/particles0.png" /&gt;
  &lt;figcaption&gt;
    Splash screen with dynamic particle text.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is another oldie - and it's sort of a mini game because, even though there's no real way to win (I just played it by ear without any real planning or direction), it's still interactive in a very game-like way.&lt;/p&gt;
&lt;p&gt;I wrote most of it during the two weeks prior to attending college primarily to have something to show off to professors. The plan was to use it in my conquest to skip out of as many basic comp-sci classes as possible. Didn't work so well - but I did get into a pretty neat class working mostly with the Android SDK and OpenGL ES early on. Unfortunately, given that it was OpenGL ES &lt;em&gt;1.1&lt;/em&gt;, the other students and I ended up only working with the highly outdated fixed pipeline.&lt;/p&gt;
&lt;p&gt;The content isn't embedded into the post this time because, as much as it pains me to say, it doesn't handle resizing very well and I've lost the original source code (though I haven't given up looking for it in my backups). There was a version down the line that resized just fine, but maybe I can just add this one to my "properly remake into an actual game" list.&lt;/p&gt;
&lt;h2 style="text-align: center;"&gt;&lt;a title="&amp;quot;Particles benchmark&amp;quot; mini game" href="http://bdero.me/particle-roll/" target="_blank"&gt;Click here to play the mini game.&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;You can use the classic W, A, S, and D keys, or the arrow keys, to roll around. That's pretty much all you need to know. When compiling it as an Android application, it would rely on the gyroscope for movement to give it the "rolling a marble around on a surface" feel.&lt;/p&gt;
&lt;figure&gt;
  &lt;img width="100%" src="https://blog.bdero.me/images/particles1.png" /&gt;
  &lt;figcaption&gt;
    The "mini game" in action.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The sphere rotation effect is faked in a 2.5D-like way, where the attached 2D particles are being modified by a 3D rotation matrix and a Z-value based radii. Their draw order is also Z-indexed. The particle text was fun stuff - I designed a very low-res (3px by 5px characters) monospace typeface on a piece of graph paper, including both lowercase and uppercase letters as well as decimal numbers and various symbols. I then decided to compress it by row (so each character's data could be represented by a string of length 5, one for each row) and manually added each character to an array that corresponds to ASCII.&lt;/p&gt;
&lt;p&gt;There are a couple of fun features, like how colliding with a red particle results in an opposing force and 1/5 total particle loss consisting of the particles that were closest to the point of impact. The yellow debris flying all over the place when colliding with blue-green particles at high speeds also makes a decent effect, and the delta clock in the background doesn't really do much, but its intent was to be an actual timer for the game.&lt;/p&gt;
&lt;p&gt;The experimental part was to make everything.. a particle. All display objects share common ancestry because they're all just circles of various colors and sizes.&lt;/p&gt;
&lt;p&gt;I wrote it in a proprietary BASIC-like language called Monkey and used its JavaScript translator. This isn't an endorsement. I do &lt;em&gt;not&lt;/em&gt; recommend Monkey due to both its proprietary nature and the fact that this could have been more effectively and easily written directly in JavaScript.&lt;/p&gt;
&lt;p&gt;The benefit of Monkey at the time was that it translates code for use with a handful of different platforms and frameworks almost seamlessly. Why didn't I just use &lt;a title="Haxe official website" href="http://haxe.org/" target="_blank"&gt;Haxe&lt;/a&gt;? Because I didn't do any research.&lt;/p&gt;</content><category term="2.5d"></category><category term="browser"></category><category term="canvas"></category><category term="circles"></category><category term="html5"></category><category term="interactive"></category><category term="javascript"></category><category term="mini game"></category><category term="monkey"></category><category term="oldie"></category><category term="particles"></category><category term="vector graphics"></category></entry><entry><title>Mini game: Equilibrium</title><link href="https://blog.bdero.me/equilibrium.html" rel="alternate"></link><published>2013-10-20T23:27:00-04:00</published><updated>2013-10-20T23:27:00-04:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-10-20:/equilibrium.html</id><summary type="html">&lt;p&gt;Well, that streak quickly came to an end. I was hoping to write new experiments on time to post every week, but time has gotten very tight very fast. Instead, I have something old to share. I banged most of it out during a physics class one day last year right around the time I started feeling sour about my college.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, that streak quickly came to an end. I was hoping to write new experiments on time to post every week, but time has gotten very tight very fast. Instead, I have something old to share. I banged most of it out during a physics class one day last year right around the time I started feeling sour about my college. &lt;!--more--&gt;&lt;/p&gt;
&lt;iframe src="http://bdero.me/html5fun/projects/equilibrium/" height="465" width="100%" frameborder="no"&gt;&lt;/iframe&gt;

&lt;p&gt;The source code is available on &lt;a title="Equilibrium source code" href="https://github.com/bdero/html5fun/blob/gh-pages/projects/equilibrium/equilibrium.js" target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the green or red point is absorbed, left clicking restarts the mini game.&lt;/p&gt;
&lt;p&gt;You are a mouse controlled green point who is able to absorb both the red center point and the spiraling white points. The red point simply remains in the center, collecting the white points that you don't collect yourself. Absorption of a white point results in growth. When you (the green point) touch the red point, both points shrink.&lt;/p&gt;
&lt;p&gt;There are two ways to lose, but no real way to win. In order to stay playing for as long as possible and progress, you must prevent the red and green points from absorbing each other. There's a sort of score/level bar at the top that collects as the sizes of the points are canceled out. Each time the "score" bar fills up, it resets and becomes more difficult to refill.&lt;/p&gt;
&lt;p&gt;I figure this might be a fun little idea to expand later.&lt;/p&gt;
&lt;p&gt;Graphics provided by the canvas 2D API via &lt;a title="jsGameSoup GitHub repository" href="https://github.com/chr15m/jsGameSoup" target="_blank"&gt;jsGameSoup&lt;/a&gt;.&lt;/p&gt;</content><category term="2d"></category><category term="browser"></category><category term="canvas"></category><category term="circles"></category><category term="html5"></category><category term="interactive"></category><category term="javascript"></category><category term="jsgamesoup"></category><category term="mini game"></category><category term="minimal"></category><category term="oldie"></category><category term="vector graphics"></category></entry><entry><title>(Not-so) infinite simplex noise map in 3D</title><link href="https://blog.bdero.me/infinite-simplex-noise-map-3d.html" rel="alternate"></link><published>2013-10-14T23:20:00-04:00</published><updated>2013-10-14T23:20:00-04:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-10-14:/infinite-simplex-noise-map-3d.html</id><summary type="html">&lt;p&gt;I thought this might be a good start for something 3D. It's not-so infinite because the terrain doesn't keep regenerating in front of the camera as you move around (which wouldn't even really take that much refactoring), but the camera's height should keep changing according to the noise even after moving far away from the terrain.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I thought this might be a good start for something 3D. It's not-so infinite because the terrain doesn't keep regenerating in front of the camera as you move around (which wouldn't even really take that much refactoring), but the camera's height should keep changing according to the noise even after moving far away from the terrain.
&lt;!--more--&gt;&lt;/p&gt;
&lt;iframe src="http://bdero.me/threejs-tests/simplexmap/" height="465" width="100%" frameborder="no"&gt;&lt;/iframe&gt;

&lt;h5&gt;&lt;strong&gt;If you don't see anything in the frame above, then either &lt;a title="Check if your browser supports WebGL" href="http://get.webgl.org/" target="_blank"&gt;your browser doesn't support WebGL&lt;/a&gt;, or your graphics driver is not sufficient for initializing a WebGL context.&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The source code is available on &lt;a title="Simplex terrain map source code" href="https://github.com/bdero/threejs-tests/blob/gh-pages/simplexmap/simplexmap.js" target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use it, just click on it to receive a pointer lock request through your browser. If you're using a flavor of Firefox, the request will display in the form of a balloon popup. When the request is accepted, you'll be able to pan the camera around Quake style. You can also move about the scene using the classic W, S, A, and D keys.&lt;/p&gt;
&lt;p&gt;As the title implies, the shape of the terrain and the Y-position of the camera is determined by a similar simplex noise function (provided by &lt;a title="simplex-noise.js Github repository" href="https://github.com/jwagner/simplex-noise.js" target="_blank"&gt;simplex-noise.js&lt;/a&gt;) to that of which I used in my &lt;a title="Some simplex noise" href="https://blog.bdero.me/some-simplex-noise.html"&gt;previous post&lt;/a&gt;. The only real difference is the fact that I used 2D simplex noise here instead of 3D since I had no interest in making the terrain morph.
That type of thing would totally be useful for morphing a water surface. Though, in that case, one might just consider using a &lt;a title="webgl-noise Github repository" href="https://github.com/ashima/webgl-noise" target="_blank"&gt;vertex shader implementation of simplex noise&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Graphics provided by WebGL via the wonderful &lt;a title="three.js Github repository" href="https://github.com/mrdoob/three.js" target="_blank"&gt;three.js&lt;/a&gt;.&lt;/p&gt;</content><category term="3d"></category><category term="algorithm"></category><category term="browser"></category><category term="canvas"></category><category term="html5"></category><category term="interactive"></category><category term="javascript"></category><category term="minimal"></category><category term="perlin noise"></category><category term="pointer lock controls"></category><category term="quake controls"></category><category term="simplex noise"></category><category term="terrain"></category><category term="three.js"></category><category term="visualization"></category><category term="webgl"></category></entry><entry><title>Some simplex noise</title><link href="https://blog.bdero.me/some-simplex-noise.html" rel="alternate"></link><published>2013-10-06T05:53:00-04:00</published><updated>2013-10-06T05:53:00-04:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-10-06:/some-simplex-noise.html</id><summary type="html">&lt;p&gt;Just a tiny simplex noise test with retro colors. c:&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just a tiny simplex noise test with retro colors. c: &lt;!--more--&gt;&lt;/p&gt;
&lt;iframe src="http://bdero.me/ivank-tests/simplexnoise/" height="200" width="100%" frameborder="no"&gt;&lt;/iframe&gt;

&lt;h5&gt;&lt;strong&gt;If you don't see anything in the frame above, then either &lt;a title="Check if your browser supports WebGL" href="http://get.webgl.org/" target="_blank"&gt;your browser doesn't support WebGL&lt;/a&gt;, or your graphics driver is not sufficient for initializing a WebGL context.&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The source code is available on &lt;a title="Simplex noise test source code" href="https://github.com/bdero/ivank-tests/blob/gh-pages/simplexnoise/simplexnoise.js" target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nothing too too interesting - it just pans around and renders out a 3D simplex noise function, passing through the third dimension over time. You can manually control the pan direction and speed by clicking and dragging the mouse around. I wanted to write a bunch of simplex noise combinations to make different kinds of textures, but I quickly lost interest and figured that moving on to some 3D things might be more fun.&lt;/p&gt;
&lt;p&gt;The colors are precomputed using the same method explained in my previous &lt;a href="https://blog.bdero.me/julia-set-viewer.html" title="Julia set viewer"&gt;Julia set viewer&lt;/a&gt; post. Since I wasn't too interested in writing an implementation myself, the actual simplex noise code was taken from a &lt;a href="https://gist.github.com/banksean/304522#file-perlin-noise-simplex-js" title="banksean's simplex noise implementation" target="_blank"&gt;gist by banksean&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Graphics provided by WebGL via &lt;a href="http://lib.ivank.net/" title="IvanK Lib" target="_blank"&gt;IvanK.js&lt;/a&gt;, though the simplex noise is just being software rendered!&lt;/p&gt;</content><category term="2d"></category><category term="algorithm"></category><category term="browser"></category><category term="canvas"></category><category term="html5"></category><category term="iteration"></category><category term="ivank.js"></category><category term="javascript"></category><category term="minimal"></category><category term="perlin noise"></category><category term="plasma"></category><category term="simplex noise"></category><category term="visualization"></category><category term="webgl"></category></entry><entry><title>Julia set viewer</title><link href="https://blog.bdero.me/julia-set-viewer.html" rel="alternate"></link><published>2013-09-28T23:16:00-04:00</published><updated>2013-09-28T23:16:00-04:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-09-28:/julia-set-viewer.html</id><summary type="html">&lt;p&gt;A little bit of fun with fractals!&lt;/p&gt;</summary><content type="html">&lt;p&gt;A little bit of fun with fractals! &lt;!--more--&gt;&lt;/p&gt;
&lt;iframe src="http://bdero.me/ivank-tests/julia/" width="100%" height="465" frameborder="no"&gt;&lt;/iframe&gt;

&lt;h5&gt;&lt;strong&gt;If you don't see anything in the frame above, then either &lt;a title="Check if your browser supports WebGL" href="http://get.webgl.org/" target="_blank"&gt;your browser doesn't support WebGL&lt;/a&gt;, or your graphics driver is not sufficient for initializing a WebGL context.&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The source code is available on &lt;a title="Julia Set viewer source code" href="https://github.com/bdero/ivank-tests/blob/gh-pages/julia/julia.js" target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There's nothing special about the way each pixel's color is determined. It's colored based on the number of iterations it takes a point to escape the given distance bound (in this case, &lt;em&gt;sqrt(10)&lt;/em&gt;) in the Julia set function, just like &lt;a title="How Julia set images are generated" href="http://www.youtube.com/watch?v=2AZYZ-L8m9Q#t=358" target="_blank"&gt;any other typical fractal viewer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to have it precompute the color pallet like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateColors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint32Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MAX_ITERATIONS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;escapeTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;escapeTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;MAX_ITERATIONS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;escapeTime&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;escapeTime&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;escapeTime&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xff000000&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;red&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;green&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...and here's what the color functions look like on a graph, where blue starts off strong and dies off, green peaks in the middle, and red ends up strong:&lt;/p&gt;
&lt;iframe src="http://graph.tk/" id="julia-set-viewer_colorgraph" width="100%" height="200" frameborder="no"&gt; &lt;/iframe&gt;

&lt;script&gt;
var graph=document.getElementById("julia-set-viewer_colorgraph");
graph.onload=function() { function g(m){ graph.contentWindow.postMessage(m,"http://graph.tk") };
g("add:(cos(x*pi)+1)/2"); // Blue
g("add:(-cos(x*pi)+1)/2"); // Red
g("add:sin(x*pi)"); // Green
g("scale:9,3");
g("center:0.5,0.5");
}&lt;/script&gt;

&lt;p&gt;The viewer is made up of a few small components:
&lt;ul&gt;
    &lt;li&gt;A &lt;strong&gt;viewport&lt;/strong&gt;, which finds the rectangle on the complex plane to render based on given &lt;em&gt;translation coordinates&lt;/em&gt;, a &lt;em&gt;zoom multiplier&lt;/em&gt;, and the current &lt;em&gt;window resolution&lt;/em&gt;.&lt;/li&gt;
    &lt;li&gt;A &lt;strong&gt;bitmap&lt;/strong&gt;, which holds the most up-to-date &lt;em&gt;image buffer&lt;/em&gt; to display via WebGL. Sections of it are continuously overwritten by the &lt;strong&gt;renderer&lt;/strong&gt;.&lt;/li&gt;
    &lt;li&gt;A &lt;strong&gt;renderer&lt;/strong&gt;, which calls the Julia set function continuously, limiting each execution time a maximum of &lt;em&gt;20ms&lt;/em&gt; and keeping track of where it left off in the &lt;strong&gt;bitmap&lt;/strong&gt; between each call. It also keeps track of the &lt;em&gt;offset&lt;/em&gt; (a complex number to add to a point each time it's squared in the Julia set function).&lt;/li&gt;
    &lt;li&gt;A &lt;strong&gt;controller&lt;/strong&gt;, which sets up the head-up display &lt;em&gt;buttons&lt;/em&gt;, &lt;em&gt;text&lt;/em&gt;, and user input &lt;em&gt;listeners&lt;/em&gt; to modify the &lt;em&gt;zoom&lt;/em&gt; and &lt;em&gt;center&lt;/em&gt; of the &lt;strong&gt;viewport&lt;/strong&gt; and randomly select new &lt;em&gt;offsets&lt;/em&gt; for the Julia set function.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;Everytime you hit &lt;strong&gt;+&lt;/strong&gt; to zoom in, the &lt;em&gt;zoom&lt;/em&gt; of the &lt;strong&gt;viewport&lt;/strong&gt; is multiplied by &lt;em&gt;1.5&lt;/em&gt;. The &lt;strong&gt;viewport&lt;/strong&gt; generates a rectangle every frame by essentially dividing a given starting rectangle's width and height by the &lt;em&gt;zoom&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Because of this setup, if you zoom in far enough, you'll crash into a pixelated mess:
&lt;img class="aligncenter" alt="julia_zoom" src="https://blog.bdero.me/images/julia_zoom.gif" /&gt;&lt;/p&gt;
&lt;p&gt;This is due to the floating point numbers having limited precision - in the case of JavaScript, floating point numbers are 64-bit. You may also notice that the &lt;strong&gt;viewport&lt;/strong&gt;'s &lt;em&gt;center&lt;/em&gt; snaps while panning when you're zoomed in that far.&lt;/p&gt;
&lt;p&gt;The graphics are provided by WebGL via the wonderful &lt;a href="http://lib.ivank.net/" title="IvanK Lib" target="_blank"&gt;IvanK.js&lt;/a&gt;. The Julia set itself is, however, ironically software rendered - mainly because IvanK.js isn't intended for use alongside low level access to WebGL.. and I wanted to see how fast I could get it to work in pure JavaScript. c:&lt;/p&gt;
&lt;p&gt;No fragment shaders were &lt;del&gt;butchered&lt;/del&gt; written in the making of this demo.&lt;/p&gt;</content><category term="2d"></category><category term="algorithm"></category><category term="browser"></category><category term="canvas"></category><category term="classic"></category><category term="fractal"></category><category term="html5"></category><category term="interactive"></category><category term="iteration"></category><category term="ivank.js"></category><category term="javascript"></category><category term="julia set"></category><category term="mobile"></category><category term="vector graphics"></category><category term="visualization"></category><category term="webgl"></category></entry><entry><title>Tower of Hanoi</title><link href="https://blog.bdero.me/tower-of-hanoi.html" rel="alternate"></link><published>2013-09-22T05:53:00-04:00</published><updated>2013-09-22T05:53:00-04:00</updated><author><name>bdero</name></author><id>tag:blog.bdero.me,2013-09-22:/tower-of-hanoi.html</id><summary type="html">&lt;p&gt;I figured I'd start with something classic.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I figured I'd start with something classic. &lt;!--more--&gt;&lt;/p&gt;
&lt;iframe src="http://bdero.me/ivank-tests/hanoi/" width="100%" height="465" frameborder="no"&gt;&lt;/iframe&gt;

&lt;h5&gt;&lt;strong&gt;If you don't see anything in the frame above, then either &lt;a title="Check if your browser supports WebGL" href="http://get.webgl.org/" target="_blank"&gt;your browser doesn't support WebGL&lt;/a&gt;, or your graphics driver is not sufficient for initializing a WebGL context.&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The source code is available on &lt;a title="Tower of Hanoi Solver source code" href="https://github.com/bdero/ivank-tests/blob/gh-pages/hanoi/hanoi.js" target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It works by generating the optimal solution using the common &lt;a title="Tower of Hanoi recursive solution" href="https://en.wikipedia.org/wiki/Tower_of_Hanoi#Recursive_solution" target="_blank"&gt;recursive algorithm&lt;/a&gt;. It then walks through each step in the solution sequence, shifting disks from peg to peg in order to give a human-friendly visual. It can generate the solution and display it for any number of starting disks. The number of disks to use is passed as an argument to the &lt;strong&gt;Hanoi()&lt;/strong&gt; constructor.&lt;/p&gt;
&lt;p&gt;The generated solution for three disks looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's organized into steps, where each array element consists of a source peg and destination peg. So the first step says to move the top-most disk of &lt;strong&gt;peg 0&lt;/strong&gt; to &lt;strong&gt;peg 2&lt;/strong&gt;, and the second step says to move the top disk of &lt;strong&gt;peg 0&lt;/strong&gt; to &lt;strong&gt;peg 1&lt;/strong&gt;, etc.. If all of the steps in the sequence were completed, then the disks would be left correctly stacked on top of &lt;strong&gt;peg 2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you run your browser's JavaScript console (&lt;strong&gt;Ctrl+Shift+K&lt;/strong&gt; in Firefox, &lt;strong&gt;Ctrl+Shift+J&lt;/strong&gt; in Chromium) and then refresh this page, you can inspect the generated solution array, which is logged after the algorithm completes and before the disks start visually shifting from peg to peg.&lt;/p&gt;
&lt;p&gt;The graphics are provided by WebGL via &lt;a href="http://lib.ivank.net/" target="_blank"&gt;IvanK.js&lt;/a&gt; and &lt;a href="http://tweener.ivank.net/" target="_blank"&gt;Tweener&lt;/a&gt;. IvanK.js is really nice because it abstracts a lot of entity management out of the way, providing lots of conveniences that the Flash API makes available without any of the proprietary garbage attached. Very fun and suitable for fast WebGL games and interactive prototypes!&lt;/p&gt;</content><category term="2d"></category><category term="algorithm"></category><category term="browser"></category><category term="canvas"></category><category term="classic"></category><category term="html5"></category><category term="ivank.js"></category><category term="javascript"></category><category term="minimal"></category><category term="puzzle"></category><category term="recursion"></category><category term="tower of hanoi"></category><category term="tweener"></category><category term="vector graphics"></category><category term="visualization"></category><category term="webgl"></category></entry></feed>